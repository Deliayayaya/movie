{"name":"tower-resource","version":"0.1.0","keywords":["collection","model","resource","orm","db","database","mvc"],"dependencies":{"tower-emitter":"~0.1.0","tower-query":"~0.1.0","tower-stream":"~0.1.0","tower-attr":"~0.1.0","tower-validator":"~0.1.0","tower-text":"~0.1.0","tower-load":"~0.1.0","part-async-series":"*"},"main":"./index.js","repository":{"type":"git","url":"http://github.com/tower/resource.git"},"readme":"# Tower Resource\n\nData models that can be stored in any database or remote service using adapters.\n\n## Installation\n\nnode:\n\n```bash\n$ npm install tower-resource\n```\n\nbrowser:\n\n```bash\n$ component install tower/resource\n```\n\n## Examples\n\n```js\nvar resource = require('tower-resource');\n```\n\n### Attributes\n\n```js\nresource('post')\n  .attr('title') // defaults to 'string'\n  .attr('body', 'text')\n  .attr('published', 'boolean', false);\n```\n\n### Validations\n\n```js\nresource('user')\n  .attr('email')\n    .validate('presence')\n    .validate('isEmail')\n    .validate('emailProvider', { in: [ 'gmail.com' ] }) // some hypothetical one\n  .attr('username')\n    .validator(function(val){\n      return !!val.match(/[a-zA-Z]/);\n    });\n```\n\nThere are two DSL methods for validation.\n\n1. `validate`: for using predefined validations (see [tower-validator](https://github.com/tower/validator)), purely to clean up the API.\n2. `validator`: for defining custom validator functions right inline. If you want to reuse your custom validator function across resources, just move the function into tower-validator.\n\n### Queries\n\n```js\nresource('post')\n  .where('published').eq(true)\n  .all(function(err, posts){\n\n  });\n```\n\nSee [tower-query]() for the entire syntax. The `where` method just delegates to a `Query` instance. You can also access the query object directly (it just adds `.select(resourceName)` for you):\n\n```js\nresource('post').query().sort('title', -1).all();\n```\n\n### Actions\n\nThere are 4 main actions for resources (which are just delegated to `query().action(name)`:\n\n- create\n- all\n- update\n- remove\n\n```js\nresource('post').create();\nresource('post').all();\nresource('post').update({ published: true });\nresource('post').remove();\n```\n\nUnder the hood, when you execute one of these actions, they get handled by a database-/service-specific adapter (mongodb, cassandra, facebook, etc.). Those adapters can perform optimizations such as streaming query results back.\n\n## License\n\nMIT","readmeFilename":"README.md","_id":"tower-resource@0.1.0","description":"Data models that can be stored in any database or remote service using adapters.","dist":{"shasum":"e3493932fc6293da1052b44f7ef9c18373e0530a","tarball":"https://registry.npmjs.org/tower-resource/-/tower-resource-0.1.0.tgz"},"_from":"tower-resource@0.1.0","_npmVersion":"1.2.18","_npmUser":{"name":"viatropos","email":"lancejpollard@gmail.com"},"maintainers":[{"name":"viatropos","email":"lancejpollard@gmail.com"}],"directories":{},"_shasum":"e3493932fc6293da1052b44f7ef9c18373e0530a","_resolved":"https://registry.npmjs.org/tower-resource/-/tower-resource-0.1.0.tgz"}