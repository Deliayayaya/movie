{"_id":"tower-query","_rev":"7-7aaba72d888a9fedb7430f4b1c9fc1c8","name":"tower-query","description":"Query anything, anywhere.","dist-tags":{"latest":"0.1.1"},"versions":{"0.1.0":{"name":"tower-query","version":"0.1.0","keywords":["sql","orm","query","database","mvc"],"main":"./index.js","dependencies":{"tower-validator":"~0.1.0","tower-program":"~0.1.0","part-each-array":"*","part-is-array":"*"},"repository":{"type":"git","url":"http://github.com/tower/query.git"},"readme":"# Tower Query API\n\nQuery anything, anywhere.\n\n## Installation\n\nnode.js:\n\n```bash\n$ npm install tower-query\n```\n\nbrowser:\n\n```bash\n$ component install tower/query\n```\n\n## Examples\n\nSelect records:\n\n```js\nvar query = require('tower-query');\n\nquery()\n  .use('memory')\n  .select('post')\n  .where('likeCount').gte(10)\n  .where('likeCount').lte(200)\n  .all(function(err, posts){\n\n  });\n```\n\nCreate record(s):\n\n```js\nquery()\n  .use('memory')\n  .select('post')\n  .create({ title: 'Foo' }, function(err, post){\n\n  });\n```\n\nOther actions `update` and `remove` work similarly.\n\nThe query delegates to adapters for these actions, which should return a `stream`-compatible API, such as a node.js `stream`, `tower-stream`, `tower-program`, or `tower-topology`. This is how `.find` looks at a lower level:\n\n```js\nquery()\n  .use('mongodb')\n  .select('post')\n  .action('find')\n  .exec()\n  .on('data', function(posts){\n\n  })\n  .on('end', function(){\n    console.log('done querying');\n  });\n```\n\n## License\n\nMIT","readmeFilename":"README.md","_id":"tower-query@0.1.0","description":"Query anything, anywhere.","dist":{"shasum":"ada0925a461a4b3ccacf173a23689beef73bcbc2","tarball":"https://registry.npmjs.org/tower-query/-/tower-query-0.1.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"viatropos","email":"lancejpollard@gmail.com"},"maintainers":[{"name":"viatropos","email":"lancejpollard@gmail.com"}],"directories":{}},"0.1.1":{"name":"tower-query","version":"0.1.1","keywords":["sql","orm","query","database","mvc"],"main":"./index.js","dependencies":{"tower-validator":"~0.1.0","tower-program":"~0.1.0","part-each-array":"*","part-is-array":"*"},"repository":{"type":"git","url":"http://github.com/tower/query.git"},"readme":"# Tower Query API\n\nQuery anything, anywhere.\n\n## Installation\n\nnode.js:\n\n```bash\n$ npm install tower-query\n```\n\nbrowser:\n\n```bash\n$ component install tower/query\n```\n\n## Examples\n\nSelect records:\n\n```js\nvar query = require('tower-query');\n\nquery()\n  .use('memory')\n  .select('post')\n  .where('likeCount').gte(10)\n  .where('likeCount').lte(200)\n  .all(function(err, posts){\n\n  });\n```\n\nCreate record(s):\n\n```js\nquery()\n  .use('memory')\n  .select('post')\n  .create({ title: 'Foo' }, function(err, post){\n\n  });\n```\n\nOther actions `update` and `remove` work similarly.\n\nThe query delegates to adapters for these actions, which should return a `stream`-compatible API, such as a node.js `stream`, `tower-stream`, `tower-program`, or `tower-topology`. This is how `.find` looks at a lower level:\n\n```js\nquery()\n  .use('mongodb')\n  .select('post')\n  .action('find')\n  .exec()\n  .on('data', function(posts){\n\n  })\n  .on('end', function(){\n    console.log('done querying');\n  });\n```\n\n## License\n\nMIT","readmeFilename":"README.md","description":"Query anything, anywhere.","bugs":{"url":"https://github.com/tower/query/issues"},"_id":"tower-query@0.1.1","dist":{"shasum":"062b88ecf932b0b7e8f57cf3d4a4704f0dd99444","tarball":"https://registry.npmjs.org/tower-query/-/tower-query-0.1.1.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"viatropos","email":"lancejpollard@gmail.com"},"maintainers":[{"name":"viatropos","email":"lancejpollard@gmail.com"}],"directories":{}},"0.1.0-pre":{"name":"tower-query","version":"0.1.0-pre","main":"./index.js","dependencies":{"tower-validator":"~0.1.0pre","tower-program":"~0.1.0pre","part-each-array":"*","part-is-array":"*"},"readme":"# Tower Query API\n\nQuery anything, anywhere.\n\n## Installation\n\nnode.js:\n\n```bash\n$ npm install tower-query\n```\n\nbrowser:\n\n```bash\n$ component install tower/query\n```\n\n## Examples\n\nSelect records:\n\n```js\nvar query = require('tower-query');\n\nquery()\n  .use('memory')\n  .select('post')\n  .where('likeCount').gte(10)\n  .where('likeCount').lte(200)\n  .all(function(err, posts){\n\n  });\n```\n\nCreate record(s):\n\n```js\nquery()\n  .use('memory')\n  .select('post')\n  .create({ title: 'Foo' }, function(err, post){\n\n  });\n```\n\nOther actions `update` and `remove` work similarly.\n\nThe query delegates to adapters for these actions, which should return a `stream`-compatible API, such as a node.js `stream`, `tower-stream`, `tower-program`, or `tower-topology`. This is how `.find` looks at a lower level:\n\n```js\nquery()\n  .use('mongodb')\n  .select('post')\n  .action('find')\n  .exec()\n  .on('data', function(posts){\n\n  })\n  .on('end', function(){\n    console.log('done querying');\n  });\n```\n\n## License\n\nMIT","readmeFilename":"README.md","_id":"tower-query@0.1.0-pre","description":"Query anything, anywhere.","dist":{"shasum":"8bb800be18e16bb0a105959e54b640dcbd82b018","tarball":"https://registry.npmjs.org/tower-query/-/tower-query-0.1.0pre.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"viatropos","email":"lancejpollard@gmail.com"},"maintainers":[{"name":"viatropos","email":"lancejpollard@gmail.com"}],"directories":{}}},"readme":"# Tower Query API\n\nQuery anything, anywhere.\n\n## Installation\n\nnode.js:\n\n```bash\n$ npm install tower-query\n```\n\nbrowser:\n\n```bash\n$ component install tower/query\n```\n\n## Examples\n\nSelect records:\n\n```js\nvar query = require('tower-query');\n\nquery()\n  .use('memory')\n  .select('post')\n  .where('likeCount').gte(10)\n  .where('likeCount').lte(200)\n  .all(function(err, posts){\n\n  });\n```\n\nCreate record(s):\n\n```js\nquery()\n  .use('memory')\n  .select('post')\n  .create({ title: 'Foo' }, function(err, post){\n\n  });\n```\n\nOther actions `update` and `remove` work similarly.\n\nThe query delegates to adapters for these actions, which should return a `stream`-compatible API, such as a node.js `stream`, `tower-stream`, `tower-program`, or `tower-topology`. This is how `.find` looks at a lower level:\n\n```js\nquery()\n  .use('mongodb')\n  .select('post')\n  .action('find')\n  .exec()\n  .on('data', function(posts){\n\n  })\n  .on('end', function(){\n    console.log('done querying');\n  });\n```\n\n## License\n\nMIT","maintainers":[{"name":"viatropos","email":"lancejpollard@gmail.com"}],"time":{"modified":"2013-09-12T01:14:14.985Z","created":"2013-06-02T05:08:58.654Z","0.1.0":"2013-06-24T05:17:51.334Z","0.1.1":"2013-09-12T01:14:14.985Z","0.1.0-pre":"2013-06-02T05:08:59.861Z"},"repository":{"type":"git","url":"http://github.com/tower/query.git"},"_attachments":{},"_etag":"W/\"52311566-1b0d\"","_lastModified":"Thu, 12 Sep 2013 01:14:14 GMT"}