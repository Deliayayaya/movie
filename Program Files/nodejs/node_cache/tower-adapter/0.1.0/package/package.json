{"name":"tower-adapter","version":"0.1.0","keywords":["orm","mvc","database","model"],"dependencies":{"tower-emitter":"~0.1.0","tower-stream":"~0.1.0","tower-query":"~0.1.0","tower-resource":"~0.1.0","tower-type":"~0.1.0","tower-load":"~0.1.0"},"main":"./index.js","repository":{"type":"git","url":"http://github.com/tower/adapter.git"},"readme":"# Tower Adapter\n\nDatastore abstraction layer.\n\nTo abstract out some database like Cassandra, a REST API like Facebook, or even something like plain web crawling, so that it can be queried like any other resource, just implement the `exec` method on a new adapter.\n\n## Installation\n\nnode.js:\n\n```\n$ npm install tower-adapter\n```\n\nbrowser:\n\n```\n$ component install tower/adapter\n```\n\n## Examples\n\n```js\nvar adapter = require('tower-adapter');\n```\n\nSee one of these for a complete example:\n\n- mongodb: https://github.com/tower/mongodb-adapter\n- ec2: https://github.com/tower/ec2-adapter\n\nExample custom REST adapter implementing the `exec` method:\n\n```js\n/**\n * Map of query actions to HTTP methods.\n */\n\nvar methods = {\n  find: 'GET',\n  create: 'POST',\n  update: 'PUT',\n  remove: 'DELETE'\n};\n\nadapter('rest').exec = function(query, fn){\n  var name = query.selects[0].resource;\n  var method = methods[query.type];\n  var params = serializeParams(query);\n\n  $.ajax({\n    url: '/api/' + name,\n    dataType: 'json',\n    type: method,\n    data: params,\n    success: function(data){\n      fn(null, data);\n    },\n    error: function(data){\n      fn(data);\n    }\n  });\n};\n\n/**\n * Convert query constraints into query parameters.\n */\n\nfunction serializeParams(query) {\n  var constraints = query.constraints;\n  var params = {};\n\n  constraints.forEach(function(constraint){\n    params[constraint.left.attr] = constraint.right.value;\n  });\n\n  return params;\n}\n```\n\nMap REST API objects to resources:\n\n```js\nadapter('facebook')\n  .model('user')\n    .attr('name')\n    .attr('firstName').from('first_name')\n    .attr('middleName').from('middle_name')\n    .attr('lastName').from('last_name')\n    .attr('gender')\n      .validate('in', [ 'female', 'male' ])\n    .attr('link')\n      .validate('isUrl')\n    .attr('username');\n```\n\nSpecify (optional) how to serialize data types from JavaScript to the database-/service-specific format:\n\n```js\nadapter('mongodb')\n  .type('string', fn)\n  .type('text', fn)\n  .type('date', fn)\n  .type('float', fn)\n  .type('integer', fn)\n  .type('number', fn)\n  .type('boolean', fn)\n  .type('bitmask', fn)\n  .type('array', fn);\n```\n\n## License\n\nMIT","readmeFilename":"README.md","_id":"tower-adapter@0.1.0","description":"Datastore abstraction layer.","dist":{"shasum":"95e1f9bf9110b032ccd370c75a6608b4305b75e2","tarball":"https://registry.npmjs.org/tower-adapter/-/tower-adapter-0.1.0.tgz"},"_from":"tower-adapter@0.1.0","_npmVersion":"1.2.18","_npmUser":{"name":"viatropos","email":"lancejpollard@gmail.com"},"maintainers":[{"name":"viatropos","email":"lancejpollard@gmail.com"}],"directories":{},"_shasum":"95e1f9bf9110b032ccd370c75a6608b4305b75e2","_resolved":"https://registry.npmjs.org/tower-adapter/-/tower-adapter-0.1.0.tgz"}